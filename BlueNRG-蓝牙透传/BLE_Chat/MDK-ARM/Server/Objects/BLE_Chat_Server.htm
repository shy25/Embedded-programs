<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Server\Objects\BLE_Chat_Server.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Server\Objects\BLE_Chat_Server.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Mar 01 14:19:51 2022
<BR><P>
<H3>Maximum Stack Usage =       2032 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RESET_HANDLER &rArr; main &rArr; comm_service &rArr; ble_send_data &rArr; BTLE_StackTick &rArr; Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC_Handler</a> from system_bluenrg1.o(i.ADC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[f]">Blue_Handler</a> from bluenrg1_it.o(i.Blue_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[19]">DMA_Handler</a> from system_bluenrg1.o(i.DMA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[b]">GPIO_Handler</a> from bluenrg1_it.o(i.GPIO_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1c]">Gatt_Read_Charac_By_Uuid_Cb</a> from gatt_client.o(i.Gatt_Read_Charac_By_Uuid_Cb) referenced from gatt_client.o(i.Gatt_Read_Charac_By_Uuid)
 <LI><a href="#[7]">HardFault_Handler</a> from bluenrg1_it.o(i.HardFault_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[13]">I2C1_Handler</a> from system_bluenrg1.o(i.I2C1_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[12]">I2C2_Handler</a> from system_bluenrg1.o(i.I2C2_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[14]">MFTX1A_Handler</a> from system_bluenrg1.o(i.MFTX1A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[15]">MFTX1B_Handler</a> from system_bluenrg1.o(i.MFTX1B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[16]">MFTX2A_Handler</a> from system_bluenrg1.o(i.MFTX2A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[17]">MFTX2B_Handler</a> from system_bluenrg1.o(i.MFTX2B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[6]">NMI_Handler</a> from bluenrg1_it.o(i.NMI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[c]">NVM_Handler</a> from system_bluenrg1.o(i.NVM_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[9]">PendSV_Handler</a> from system_bluenrg1.o(i.PendSV_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[5]">RESET_HANDLER</a> from system_bluenrg1.o(i.RESET_HANDLER) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[18]">RTC_Handler</a> from system_bluenrg1.o(i.RTC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[e]">SPI_Handler</a> from system_bluenrg1.o(i.SPI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[8]">SVC_Handler</a> from bluenrg1_it.o(i.SVC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[a]">SysTick_Handler</a> from bluenrg1_it.o(i.SysTick_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[d]">UART_Handler</a> from bluenrg1_it.o(i.UART_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[10]">WDG_Handler</a> from bluenrg1_it.o(i.WDG_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[1d]">comm_receive</a> from comm.o(i.comm_receive) referenced from ble_chat_main.o(i.initial_peripheral)
 <LI><a href="#[1a]">fputc</a> from sdk_eval_com.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[1f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[21]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[214]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[215]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[22]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[216]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7e]"></a>CS_contextSave</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
</UL>

<P><STRONG><a name="[1c7]"></a>CS_contextRestore</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[85]"></a>BlueNRG_IdleSleep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[40]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[23]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[24]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[26]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[28]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[2a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[217]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[218]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[219]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[220]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[221]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[222]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[223]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[224]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[225]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[226]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[227]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[228]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[229]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[22b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[22c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[22d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[22e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[22f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[230]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[231]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[232]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[20]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[233]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[234]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry6.o(.ARM.Collect$$rtentry$$00000006))

<P><STRONG><a name="[2c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[235]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; comm_service &rArr; ble_send_data &rArr; BTLE_StackTick &rArr; Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[236]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[31]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[237]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[33]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Select_STK_Method
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingConfirm
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Add_To_Database
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sca
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[238]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[35]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Chat_Service
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_peripheral
</UL>

<P><STRONG><a name="[38]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[39]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[37]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[25]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[27]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[239]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[15c]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>

<P><STRONG><a name="[41]"></a>memcpy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ble_para
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ble_para
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[23a]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>memset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[46]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[45]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[23b]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
</UL>

<P><STRONG><a name="[23c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Address
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_4
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_TO_NRG_32
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[23d]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[3d]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[49]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[29]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[2b]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[36]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3c]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[4b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[4c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[30]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[34]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[240]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.ADC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[4f]"></a>APP_Tick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chat.o(i.APP_Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = APP_Tick &rArr; Make_Connection &rArr; aci_gap_set_discoverable &rArr; GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>Accu_Handles_Requiring_Auth</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, rom_att.o(i.Accu_Handles_Requiring_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Accu_Handles_Requiring_Auth &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
</UL>

<P><STRONG><a name="[54]"></a>Accu_UuidTypes_Requiring_Auth</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, rom_att.o(i.Accu_UuidTypes_Requiring_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Accu_UuidTypes_Requiring_Auth &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[56]"></a>Acl_Event_Handler</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, acl.o(i.Acl_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_isr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_isr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_isr
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_isr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event_isr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_isr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_isr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_isr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_isr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[62]"></a>Acl_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, acl.o(i.Acl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Acl_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
</UL>

<P><STRONG><a name="[64]"></a>Acl_Process_Q</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, acl.o(i.Acl_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = Acl_Process_Q &rArr; L2C_Rcv_Event_Handler &rArr; SM_L2CAP_Handler &rArr; sm_PairingCmplt &rArr; sm_Add_To_Database &rArr; SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Node
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rcv_ACL_Data
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[69]"></a>Acl_Rcv_Pkt_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, acl.o(i.Acl_Rcv_Pkt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Acl_Rcv_Pkt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[6b]"></a>Acl_Transmit_Packet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, acl.o(i.Acl_Transmit_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Acl_Transmit_Packet &rArr; slave_advance &rArr; LL_Sleep_Req
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
</UL>

<P><STRONG><a name="[6e]"></a>Acl_Tx_Cmpl_Pkt_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, acl.o(i.Acl_Tx_Cmpl_Pkt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Acl_Tx_Cmpl_Pkt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[6f]"></a>Add_Chat_Service</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, gatt_db.o(i.Add_Chat_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = Add_Chat_Service &rArr; aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
</UL>

<P><STRONG><a name="[84]"></a>App_SleepMode_Check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sleep.o(i.App_SleepMode_Check))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[72]"></a>Att_Send_Find_By_Typ_Val_Req_Pdu</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rom_att.o(i.Att_Send_Find_By_Typ_Val_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Att_Send_Find_By_Typ_Val_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[111]"></a>Att_Send_Find_Info_Req_Pdu</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rom_att.o(i.Att_Send_Find_Info_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Att_Send_Find_Info_Req_Pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[117]"></a>Att_Send_Read_Blob_Req_Pdu</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rom_att.o(i.Att_Send_Read_Blob_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Att_Send_Read_Blob_Req_Pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[73]"></a>Att_Send_Read_By_Grp_Typ_Req_Pdu</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rom_att.o(i.Att_Send_Read_By_Grp_Typ_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Att_Send_Read_By_Grp_Typ_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[74]"></a>Att_Send_Read_By_Typ_Req_Pdu</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rom_att.o(i.Att_Send_Read_By_Typ_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Att_Send_Read_By_Typ_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
</UL>

<P><STRONG><a name="[75]"></a>Attribute_Modified_CB</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gatt_db.o(i.Attribute_Modified_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Attribute_Modified_CB &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event
</UL>

<P><STRONG><a name="[76]"></a>BTLE_StackTick</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bluenrg_main_func.o(i.BTLE_StackTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 1968 + Unknown Stack Size
<LI>Call Chain = BTLE_StackTick &rArr; Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Process_Q
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[81]"></a>BlueNRG_Sleep</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, sleep.o(i.BlueNRG_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Sleep &rArr; BTLE_StackTick &rArr; Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SleepMode_Check
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimer_Stop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_ms
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Deep_Sleep_Check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_IdleSleep
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>BlueNRG_Stack_Initialization</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BlueNRG_Stack_Initialization &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_RAM_and_Layers &rArr; LL_Init &rArr; Blue_Init_Global &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_peripheral
</UL>

<P><STRONG><a name="[1c5]"></a>BlueNRG_Stack_Initialize_ConfigData</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[88]"></a>BlueNRG_Stack_Initialize_RAM_and_Layers</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_RAM_and_Layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BlueNRG_Stack_Initialize_RAM_and_Layers &rArr; LL_Init &rArr; Blue_Init_Global &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init_patch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Reset_Context
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[7b]"></a>BlueNRG_Stack_Perform_Crystal_Check</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Perform_Crystal_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BlueNRG_Stack_Perform_Crystal_Check &rArr; set_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[83]"></a>BlueNRG_Stack_Perform_Deep_Sleep_Check</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Perform_Deep_Sleep_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BlueNRG_Stack_Perform_Deep_Sleep_Check &rArr; patch_advance_transmit &rArr; advance_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_advance_transmit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepSleepTimers_check
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[f]"></a>Blue_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.Blue_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Blue_Handler &rArr; RAL_Isr &rArr; go_to_connect &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[95]"></a>Blue_Init_Global</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, routines_support.o(i.Blue_Init_Global))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Blue_Init_Global &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Set_Radio_Config_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[96]"></a>Blue_Set_Radio_Config_Data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rom_ll_routines_support.o(i.Blue_Set_Radio_Config_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Blue_Set_Radio_Config_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
</UL>

<P><STRONG><a name="[98]"></a>CHAT_DeviceInit</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, chat.o(i.CHAT_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = CHAT_DeviceInit &rArr; Add_Chat_Service &rArr; aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_para_addr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Chat_Service
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_peripheral
</UL>

<P><STRONG><a name="[9f]"></a>CRMU_PeripheralClockCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bluenrg1_crmu.o(i.CRMU_PeripheralClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CRMU_PeripheralClockCmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Configuration
</UL>

<P><STRONG><a name="[a3]"></a>CheckSecForSignedWrite</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, att.o(i.CheckSecForSignedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckSecForSignedWrite &rArr; ValidLinkPermRequest &rArr; Check_Permission &rArr; SM_Get_Link_Security_Status &rArr; SM_Find_Remote_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[f3]"></a>Check_Encry_Key_Size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rom_gatt_server.o(i.Check_Encry_Key_Size))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>

<P><STRONG><a name="[a6]"></a>Check_Flags</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, gatt_client.o(i.Check_Flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Check_Flags &rArr; Find_Gatt_Client
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
</UL>

<P><STRONG><a name="[a9]"></a>Check_For_Service_Change</STRONG> (Thumb, 784 bytes, Stack size 608 bytes, gatt_server.o(i.Check_For_Service_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = Check_For_Service_Change &rArr; Flash_Read_Client_Data &rArr; SDB_Find_Record &rArr; Resolve_PrivateAddr &rArr; Calculate_Hash &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Client_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fetch_Handle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[ae]"></a>Check_Permission</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rom_att.o(i.Check_Permission))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Check_Permission &rArr; SM_Get_Link_Security_Status &rArr; SM_Find_Remote_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Link_Security_Status
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Check_Encryption_KeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>

<P><STRONG><a name="[b1]"></a>Check_Serv_Chng_Charac_Ind_Not</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rom_gatt_server.o(i.Check_Serv_Chng_Charac_Ind_Not))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_Serv_Chng_Charac_Ind_Not &rArr; Search_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
</UL>

<P><STRONG><a name="[1fb]"></a>Clock_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clock.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_myself
</UL>

<P><STRONG><a name="[1be]"></a>Clock_Time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.Clock_Time))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
</UL>

<P><STRONG><a name="[19]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.DMA_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1c4]"></a>Delay_With_NOP_Cycles</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utils.o(i.Delay_With_NOP_Cycles))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
</UL>

<P><STRONG><a name="[80]"></a>DeviceConfiguration</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, system_bluenrg1.o(i.DeviceConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DeviceConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
</UL>

<P><STRONG><a name="[b3]"></a>Diversify</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rom_securitymgr.o(i.Diversify))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Diversify &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Long_Term_Key
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_IRK
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenEDIV_RecovDIV
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Generate_CSRK
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[89]"></a>Dynamic_allocator</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, mem_alloc.o(i.Dynamic_allocator))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Dynamic_allocator &rArr; Mem_assign &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
</UL>

<P><STRONG><a name="[b7]"></a>Exchg_Mtu_Resp</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, rom_att.o(i.Exchg_Mtu_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Exchg_Mtu_Resp &rArr; Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[b9]"></a>Exec_Write_Resp</STRONG> (Thumb, 540 bytes, Stack size 88 bytes, att.o(i.Exec_Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Exec_Write_Resp &rArr; aci_GATT_ATTRIBUTE_MODIFIED_Event &rArr; aci_gatt_attribute_modified_event &rArr; Attribute_Modified_CB &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_ATTRIBUTE_MODIFIED_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[b6]"></a>FLASH_ErasePage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bluenrg1_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = FLASH_ErasePage &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitBusy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_para
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Sector
</UL>

<P><STRONG><a name="[bd]"></a>FLASH_ProgramWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bluenrg1_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitBusy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvaliDate_Record
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[be]"></a>FLASH_ProgramWordBurst</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bluenrg1_flash.o(i.FLASH_ProgramWordBurst))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = FLASH_ProgramWordBurst &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitBusy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cell_data
</UL>

<P><STRONG><a name="[bc]"></a>FLASH_WaitBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrg1_flash.o(i.FLASH_WaitBusy))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordBurst
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[ab]"></a>Fetch_Handle</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, rom_gatt_server.o(i.Fetch_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Fetch_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[ac]"></a>Find_Attr_Index</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, gatt_server.o(i.Find_Attr_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Serv_Database
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[bf]"></a>Find_By_Type_Val_Resp</STRONG> (Thumb, 652 bytes, Stack size 88 bytes, att.o(i.Find_By_Type_Val_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Find_By_Type_Val_Resp &rArr; Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[c0]"></a>Find_Client_Data</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, rom_sdb.o(i.Find_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Find_Client_Data &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_GattDb_Start_Addr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_SecDb_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Client_Data
</UL>

<P><STRONG><a name="[a7]"></a>Find_Gatt_Client</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gatt_client.o(i.Find_Gatt_Client))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flags
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Serv_Database
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[c5]"></a>Find_Info_Resp</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, rom_att.o(i.Find_Info_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Find_Info_Resp &rArr; Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[12f]"></a>Find_L2cap_conn_index</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, l2cap.o(i.Find_L2cap_conn_index))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[131]"></a>Find_L2cap_signalling_connection</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, l2cap.o(i.Find_L2cap_signalling_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Find_L2cap_signalling_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
</UL>

<P><STRONG><a name="[ed]"></a>Find_Timed_Out_Connection</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gatt_server.o(i.Find_Timed_Out_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Find_Timed_Out_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_TimeOut_Handler
</UL>

<P><STRONG><a name="[aa]"></a>Flash_Read_Client_Data</STRONG> (Thumb, 58 bytes, Stack size 96 bytes, sdb.o(i.Flash_Read_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Flash_Read_Client_Data &rArr; SDB_Find_Record &rArr; Resolve_PrivateAddr &rArr; Calculate_Hash &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[c8]"></a>Flash_Write_Client_Data</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sdb.o(i.Flash_Write_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Serv_Database
</UL>

<P><STRONG><a name="[cb]"></a>GAP_DiscProcTimeoutcb</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gap.o(i.GAP_DiscProcTimeoutcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = GAP_DiscProcTimeoutcb &rArr; LL_Enable_Disable_Scan_patched &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PROCEDURE_COMPLETE_Event
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[ce]"></a>GAP_Init</STRONG> (Thumb, 334 bytes, Stack size 112 bytes, gap.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = GAP_Init &rArr; Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[d4]"></a>GAP_Internal_Evt_Handler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gap.o(i.GAP_Internal_Evt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAP_Internal_Evt_Handler &rArr; aci_GAP_PROCEDURE_COMPLETE_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PROCEDURE_COMPLETE_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[58]"></a>GAP_LL_Event_Handler_ISR</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gap.o(i.GAP_LL_Event_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GAP_LL_Event_Handler_ISR &rArr; GAP_Parse_Advertising_Report &rArr; aci_LL_ADVERTISING_REPORT_Event_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_isr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Parse_Advertising_Report
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_LL_ADVERTISING_REPORT_Event_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[d8]"></a>GAP_LimDiscTimeoutcb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gap.o(i.GAP_LimDiscTimeoutcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = GAP_LimDiscTimeoutcb &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_SET_LIMITED_DISCOVERABLE_Event
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[db]"></a>GAP_Notify_Add_Charac</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, rom_gap_rom.o(i.GAP_Notify_Add_Charac))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GAP_Notify_Add_Charac &rArr; GATT_Num_Charac_Present &rArr; Search_Service_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>

<P><STRONG><a name="[d7]"></a>GAP_Parse_Advertising_Report</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, gap.o(i.GAP_Parse_Advertising_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GAP_Parse_Advertising_Report &rArr; aci_LL_ADVERTISING_REPORT_Event_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_LL_ADVERTISING_REPORT_Event_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[de]"></a>GAP_Privacy</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, rom_gap.o(i.GAP_Privacy))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = GAP_Privacy &rArr; Generate_Resolvable_PrivateAddr &rArr; SM_Generate_IRK &rArr; Diversify &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Resolvable_PrivateAddr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Address
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[e4]"></a>GAP_PrivateAddrTimercb</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, rom_gap.o(i.GAP_PrivateAddrTimercb))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = GAP_PrivateAddrTimercb &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[78]"></a>GAP_Process_Q</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, gap.o(i.GAP_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GAP_Process_Q &rArr; Gatt_Read_Charac_By_Uuid &rArr; Att_Send_Read_By_Typ_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_SET_LIMITED_DISCOVERABLE_Event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[90]"></a>GAP_Reset_Context</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gap.o(i.GAP_Reset_Context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GAP_Reset_Context &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
</UL>

<P><STRONG><a name="[e7]"></a>GAP_Set_Discoverable_Mode</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, gap.o(i.GAP_Set_Discoverable_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[10d]"></a>GAP_Started_Gatt_Proc</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gap.o(i.GAP_Started_Gatt_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[e9]"></a>GAP_Terminate_Link</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rom_gap_rom.o(i.GAP_Terminate_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GAP_Terminate_Link &rArr; LL_Disconnect_Link &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
</UL>

<P><STRONG><a name="[fa]"></a>GATT_Clear_Flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rom_att.o(i.GATT_Clear_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[dc]"></a>GATT_Num_Charac_Present</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, rom_gatt_server.o(i.GATT_Num_Charac_Present))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GATT_Num_Charac_Present &rArr; Search_Service_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GAP_Handle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
</UL>

<P><STRONG><a name="[ff]"></a>GATT_Set_Flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rom_att.o(i.GATT_Set_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[ec]"></a>GATT_TimeOut_Handler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, gatt_server.o(i.GATT_TimeOut_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GATT_TimeOut_Handler &rArr; Find_Timed_Out_Connection
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Timed_Out_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[b]"></a>GPIO_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.GPIO_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[ee]"></a>GPIO_Init</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, bluenrg1_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[193]"></a>GapIsPrivacySupported</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rom_gap.o(i.GapIsPrivacySupported))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[ef]"></a>Gatt_Add_Charac_Desc</STRONG> (Thumb, 340 bytes, Stack size 128 bytes, gatt_server.o(i.Gatt_Add_Charac_Desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>

<P><STRONG><a name="[d2]"></a>Gatt_Add_Characteristic</STRONG> (Thumb, 820 bytes, Stack size 184 bytes, gatt_server.o(i.Gatt_Add_Characteristic))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GAP_Handle
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Encry_Key_Size
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[f2]"></a>Gatt_Add_Descriptor</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, gatt_server.o(i.Gatt_Add_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Gatt_Add_Descriptor &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Encry_Key_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[d1]"></a>Gatt_Add_Service</STRONG> (Thumb, 314 bytes, Stack size 88 bytes, gatt_server.o(i.Gatt_Add_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Gatt_Add_Service &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[102]"></a>Gatt_Find_Timed_Out_Connection_Index</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_server.o(i.Gatt_Find_Timed_Out_Connection_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gatt_Find_Timed_Out_Connection_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[f4]"></a>Gatt_Flush_Pending_AclPacket_Lists</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, gatt_server.o(i.Gatt_Flush_Pending_AclPacket_Lists))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Gatt_Flush_Pending_AclPacket_Lists &rArr; List_Circular_Remove_Node
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[f5]"></a>Gatt_Flush_Pending_AttrPdu_Lists</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, gatt_server.o(i.Gatt_Flush_Pending_AttrPdu_Lists))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Gatt_Flush_Pending_AttrPdu_Lists &rArr; List_Circular_Remove_Node
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[79]"></a>Gatt_Process_Q</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, gatt_server.o(i.Gatt_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 1960 + Unknown Stack Size
<LI>Call Chain = Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Head
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Set_Channel_Disconnected
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Is_Device_Bonded
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[e6]"></a>Gatt_Read_Charac_By_Uuid</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, gatt_client.o(i.Gatt_Read_Charac_By_Uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Gatt_Read_Charac_By_Uuid &rArr; Att_Send_Read_By_Typ_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flags
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
</UL>

<P><STRONG><a name="[1c]"></a>Gatt_Read_Charac_By_Uuid_Cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gatt_client.o(i.Gatt_Read_Charac_By_Uuid_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Gatt_Read_Charac_By_Uuid_Cb &rArr; Gatt_Super_Handler &rArr; send_gatt_event &rArr; aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.Gatt_Read_Charac_By_Uuid)
</UL>
<P><STRONG><a name="[f6]"></a>Gatt_Reset_To_Closed_State</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, gatt_server.o(i.Gatt_Reset_To_Closed_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 1928 + Unknown Stack Size
<LI>Call Chain = Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Serv_Database
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AttrPdu_Lists
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[f0]"></a>Gatt_Server_Db_Check</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gatt_server.o(i.Gatt_Server_Db_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Gatt_Server_Db_Check &rArr; Check_Serv_Chng_Charac_Ind_Not &rArr; Search_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serv_Chng_Charac_Ind_Not
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[104]"></a>Gatt_Server_Init</STRONG> (Thumb, 490 bytes, Stack size 128 bytes, gatt_server.o(i.Gatt_Server_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Gatt_Server_Init &rArr; Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
</UL>

<P><STRONG><a name="[106]"></a>Gatt_Server_L2C_Handler</STRONG> (Thumb, 758 bytes, Stack size 64 bytes, gatt_server.o(i.Gatt_Server_L2C_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_rx_confirm_event
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[103]"></a>Gatt_Store_Serv_Database</STRONG> (Thumb, 310 bytes, Stack size 552 bytes, gatt_server.o(i.Gatt_Store_Serv_Database))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[100]"></a>Gatt_Super_Handler</STRONG> (Thumb, 1140 bytes, Stack size 96 bytes, gatt_client.o(i.Gatt_Super_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Gatt_Super_Handler &rArr; send_gatt_event &rArr; aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Grp_Typ_Req_Pdu
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_Blob_Req_Pdu
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Find_Info_Req_Pdu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Find_By_Typ_Val_Req_Pdu
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_event
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_PROCEDURE_COMPLETE_Event
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ERROR_RESP_Event
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_DISC_READ_CHARAC_BY_UUID_RESP_Event
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_READ_RESP_Event
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_READ_MULTIPLE_RESP_Event
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_READ_BLOB_RESP_Event
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Started_Gatt_Proc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Internal_Evt_Handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid_Cb
</UL>

<P><STRONG><a name="[d3]"></a>Gatt_Update_Charac_Value</STRONG> (Thumb, 630 bytes, Stack size 72 bytes, gatt_server.o(i.Gatt_Update_Charac_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
</UL>

<P><STRONG><a name="[e2]"></a>Generate_Non_Resolvable_Private_Address</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rom_gap.o(i.Generate_Non_Resolvable_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Generate_Non_Resolvable_Private_Address &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy
</UL>

<P><STRONG><a name="[e0]"></a>Generate_Resolvable_PrivateAddr</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, rom_securitymgr.o(i.Generate_Resolvable_PrivateAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Generate_Resolvable_PrivateAddr &rArr; SM_Generate_IRK &rArr; Diversify &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_IRK
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy
</UL>

<P><STRONG><a name="[11b]"></a>Generate_SubKeys</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, rom_securitymgr.o(i.Generate_SubKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Generate_SubKeys &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftShift
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_SignedData
</UL>

<P><STRONG><a name="[eb]"></a>Get_GAP_Handle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rom_gap_rom.o(i.Get_GAP_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>

<P><STRONG><a name="[c2]"></a>Get_Max_SecDb_Size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdb.o(i.Get_Max_SecDb_Size))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[11d]"></a>Get_Random_Addr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hci.o(i.Get_Random_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_Random_Addr &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
</UL>

<P><STRONG><a name="[11e]"></a>Get_SecRec_Len_In_Words</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rom_sdb.o(i.Get_SecRec_Len_In_Words))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_SecRec_Len_In_Words
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRecord_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[11f]"></a>Get_SecRecord_Size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdb.o(i.Get_SecRecord_Size))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
</UL>

<P><STRONG><a name="[d0]"></a>Get_StaticRandAddr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rom_gap_rom.o(i.Get_StaticRandAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_StaticRandAddr &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_Flash_Store_Data</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hal.o(i.HAL_Flash_Store_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_Flash_Store_Data &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[122]"></a>HAL_Generate_Random_Bytes_To</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, hal.o(i.HAL_Generate_Random_Bytes_To))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_Generate_Random_Bytes_To
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingConfirm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_Set_TX_Power_Level</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal.o(i.HAL_Set_TX_Power_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Set_TX_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
</UL>

<P><STRONG><a name="[125]"></a>HAL_VTimerAcc_sysT32_ms</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, host_timer.o(i.HAL_VTimerAcc_sysT32_ms))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>

<P><STRONG><a name="[123]"></a>HAL_VTimerGetCurrentTime_sysT32</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, host_timer.o(i.HAL_VTimerGetCurrentTime_sysT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_VTimerGetCurrentTime_sysT32 &rArr; Timer_sysTime32_convMachineTime
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_ms
</UL>

<P><STRONG><a name="[82]"></a>HAL_VTimerStart_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, host_timer.o(i.HAL_VTimerStart_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_VTimerStart_ms &rArr; HAL_VTimerStart_sysT32 &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_sysT32
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerAcc_sysT32_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[126]"></a>HAL_VTimerStart_sysT32</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, host_timer.o(i.HAL_VTimerStart_sysT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_VTimerStart_sysT32 &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_ms
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_VTimerTimeoutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, host_timer.o(i.HAL_VTimerTimeoutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[7f]"></a>HAL_VTimer_Stop</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, host_timer.o(i.HAL_VTimer_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_VTimer_Stop &rArr; Timer_StopOneShot &rArr; List_Circular_Remove_Node
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[128]"></a>HAL_Write_ConfigData</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal.o(i.HAL_Write_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_Write_ConfigData &rArr; LL_Set_Address &rArr; is_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_write_config_data
</UL>

<P><STRONG><a name="[8a]"></a>HCI_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hci.o(i.HCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCI_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
</UL>

<P><STRONG><a name="[119]"></a>Hal_Get_Random_Number</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal.o(i.Hal_Get_Random_Number))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Resolvable_PrivateAddr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
</UL>

<P><STRONG><a name="[129]"></a>Hal_Get_Random_Number32</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, hal.o(i.Hal_Get_Random_Number32))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Hal_Get_Random_Number32
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
</UL>

<P><STRONG><a name="[12a]"></a>Handle_Val_Indicate</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, gatt_server.o(i.Handle_Val_Indicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Handle_Val_Indicate &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
</UL>

<P><STRONG><a name="[12b]"></a>Handle_Val_Notify</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, gatt_server.o(i.Handle_Val_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[12c]"></a>Hex2BcdAscii</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, comm.o(i.Hex2BcdAscii))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Hex2BcdAscii &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_frame
</UL>

<P><STRONG><a name="[13]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.I2C1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[12]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.I2C2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[cf]"></a>IDD_Initialize_Device_IDs</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, device_id_data.o(i.IDD_Initialize_Device_IDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = IDD_Initialize_Device_IDs &rArr; HAL_Flash_Store_Data &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[ad]"></a>Ind_Service_Change_Charac</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, gatt_server.o(i.Ind_Service_Change_Charac))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[12d]"></a>InvaliDate_Record</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rom_sdb.o(i.InvaliDate_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = InvaliDate_Record &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
</UL>

<P><STRONG><a name="[12e]"></a>L2CAP_Reset_To_Closed_State</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, l2cap.o(i.L2CAP_Reset_To_Closed_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = L2CAP_Reset_To_Closed_State &rArr; Timer_StopOneShot &rArr; List_Circular_Remove_Node
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_L2cap_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
</UL>

<P><STRONG><a name="[130]"></a>L2C_Build_Command_Reject_Pdu</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, l2cap.o(i.L2C_Build_Command_Reject_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = L2C_Build_Command_Reject_Pdu &rArr; L2C_Send_Data &rArr; Acl_Transmit_Packet &rArr; slave_advance &rArr; LL_Sleep_Req
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_L2cap_signalling_connection
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[8e]"></a>L2C_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, l2cap.o(i.L2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = L2C_Init &rArr; Acl_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
</UL>

<P><STRONG><a name="[66]"></a>L2C_Rcv_Event_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, l2cap.o(i.L2C_Rcv_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Event_Handler &rArr; SM_L2CAP_Handler &rArr; sm_PairingCmplt &rArr; sm_Add_To_Database &rArr; SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Process_Q
</UL>

<P><STRONG><a name="[57]"></a>L2C_Rcv_Event_Handler_ISR</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, l2cap.o(i.L2C_Rcv_Event_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[fb]"></a>L2C_Send_Data</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, l2cap.o(i.L2C_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = L2C_Send_Data &rArr; Acl_Transmit_Packet &rArr; slave_advance &rArr; LL_Sleep_Req
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
</UL>

<P><STRONG><a name="[136]"></a>L2C_SigChan_Req_TimeOut_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, l2cap.o(i.L2C_SigChan_Req_TimeOut_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2C_SigChan_Req_TimeOut_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[133]"></a>L2C_Signal_Channel_Handler</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, l2cap.o(i.L2C_Signal_Channel_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = L2C_Signal_Channel_Handler &rArr; L2C_Build_Command_Reject_Pdu &rArr; L2C_Send_Data &rArr; Acl_Transmit_Packet &rArr; slave_advance &rArr; LL_Sleep_Req
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_L2cap_signalling_connection
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_L2cap_conn_index
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[135]"></a>L2C_Signal_Channel_Handler_ISR</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, l2cap.o(i.L2C_Signal_Channel_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = L2C_Signal_Channel_Handler_ISR &rArr; L2CAP_Reset_To_Closed_State &rArr; Timer_StopOneShot &rArr; List_Circular_Remove_Node
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Reset_To_Closed_State
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[13b]"></a>LE_TO_NRG_32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utils.o(i.LE_TO_NRG_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LE_TO_NRG_32
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_SignedData
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
</UL>

<P><STRONG><a name="[ea]"></a>LL_Disconnect_Link</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ll_routines.o(i.LL_Disconnect_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_Disconnect_Link &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Link
</UL>

<P><STRONG><a name="[d9]"></a>LL_Enable_Disable_Adv</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, rom_ll_ll_routines.o(i.LL_Enable_Disable_Adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>

<P><STRONG><a name="[cc]"></a>LL_Enable_Disable_Scan_patched</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, ll_routines_master.o(i.LL_Enable_Disable_Scan_patched))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = LL_Enable_Disable_Scan_patched &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_scan_slot
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_slot
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
</UL>

<P><STRONG><a name="[a2]"></a>LL_Encrypt_Plain_Data</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ll_routines_support.o(i.LL_Encrypt_Plain_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Key
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_SubKeys
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diversify
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_SignedData
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Master_Gen_Confirm_Val
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Gen_Confirm_Val
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_Unmask_DIV
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Hash
</UL>

<P><STRONG><a name="[df]"></a>LL_Get_Address</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rom_ll_ll_routines.o(i.LL_Get_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Master_Gen_Confirm_Val
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Gen_Confirm_Val
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
</UL>

<P><STRONG><a name="[1c9]"></a>LL_Get_Adv_Params</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rom_ll_ll_routines.o(i.LL_Get_Adv_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_Get_Adv_Params
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
</UL>

<P><STRONG><a name="[148]"></a>LL_Get_Adv_Tx_Power_Level</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, rom_ll_routines_support.o(i.LL_Get_Adv_Tx_Power_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_Get_Adv_Tx_Power_Level
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_power
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
</UL>

<P><STRONG><a name="[14a]"></a>LL_Get_LTK</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, ll_routines_support.o(i.LL_Get_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LL_Get_LTK &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[8c]"></a>LL_Init</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, rom_ll_ll_routines.o(i.LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_Init &rArr; Blue_Init_Global &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_White_List_Flush
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rcv_ACL_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
</UL>

<P><STRONG><a name="[8d]"></a>LL_Init_patch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll_routines.o(i.LL_Init_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_Init_patch
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
</UL>

<P><STRONG><a name="[68]"></a>LL_Rcv_ACL_Data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rom_ll_ll_routines.o(i.LL_Rcv_ACL_Data))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Process_Q
</UL>

<P><STRONG><a name="[6c]"></a>LL_Send_ACL_Data</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rom_ll_ll_routines.o(i.LL_Send_ACL_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_Send_ACL_Data &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Packet
</UL>

<P><STRONG><a name="[e3]"></a>LL_Set_Address</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, rom_ll_ll_routines.o(i.LL_Set_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_Set_Address &rArr; is_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_connected
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>

<P><STRONG><a name="[14f]"></a>LL_Set_Adv_Data</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_Set_Adv_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data_patch
</UL>

<P><STRONG><a name="[14e]"></a>LL_Set_Adv_Data_patch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_routines.o(i.LL_Set_Adv_Data_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_Set_Adv_Data_patch &rArr; LL_Set_Adv_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
</UL>

<P><STRONG><a name="[150]"></a>LL_Set_Adv_Params</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_Set_Adv_Params &rArr; unpack_4
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_4
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params_patch
</UL>

<P><STRONG><a name="[152]"></a>LL_Set_Adv_Params_patch</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ll_routines.o(i.LL_Set_Adv_Params_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LL_Set_Adv_Params_patch &rArr; LL_Set_Adv_Params &rArr; unpack_4
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
</UL>

<P><STRONG><a name="[154]"></a>LL_Set_Scan_Resp_Data</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, rom_ll_ll_routines.o(i.LL_Set_Scan_Resp_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_Set_Scan_Resp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Scan_Resp_Data_patch
</UL>

<P><STRONG><a name="[153]"></a>LL_Set_Scan_Resp_Data_patch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll_routines.o(i.LL_Set_Scan_Resp_Data_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_Set_Scan_Resp_Data_patch &rArr; LL_Set_Scan_Resp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Scan_Resp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_response_data
</UL>

<P><STRONG><a name="[143]"></a>LL_Sleep_Req</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, rom_ll_routines_support.o(i.LL_Sleep_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_Sleep_Req
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
</UL>

<P><STRONG><a name="[156]"></a>LL_Start_Encryption</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, rom_ll_ll_routines_master.o(i.LL_Start_Encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LL_Start_Encryption &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
</UL>

<P><STRONG><a name="[14b]"></a>LL_White_List_Flush</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rom_ll_white_list.o(i.LL_White_List_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[16d]"></a>LL_receive_data_patch</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, isr_routines.o(i.LL_receive_data_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_receive_data_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1f4]"></a>LL_update_proc</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, rom_ll_isr_routines.o(i.LL_update_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_update_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
</UL>

<P><STRONG><a name="[171]"></a>LL_update_proc_patch</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, isr_routines.o(i.LL_update_proc_patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_update_proc_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[ba]"></a>List_Circular_Get_Size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rom_list.o(i.List_Circular_Get_Size))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AttrPdu_Lists
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
</UL>

<P><STRONG><a name="[fc]"></a>List_Circular_Insert_Head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rom_list.o(i.List_Circular_Insert_Head))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[67]"></a>List_Circular_Insert_Node</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rom_list.o(i.List_Circular_Insert_Node))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Process_Q
</UL>

<P><STRONG><a name="[6a]"></a>List_Circular_Insert_Tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rom_list.o(i.List_Circular_Insert_Tail))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Val_Notify
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Val_Indicate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AttrPdu_Lists
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>

<P><STRONG><a name="[157]"></a>List_Circular_Node_Present</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rom_list.o(i.List_Circular_Node_Present))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
</UL>

<P><STRONG><a name="[a8]"></a>List_Circular_Remove_Head</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rom_list.o(i.List_Circular_Remove_Head))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flags
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[65]"></a>List_Circular_Remove_Node</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, rom_list.o(i.List_Circular_Remove_Node))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = List_Circular_Remove_Node
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Node_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Process_Q
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Val_Notify
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Val_Indicate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AttrPdu_Lists
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>

<P><STRONG><a name="[14]"></a>MFTX1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFTX1A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[15]"></a>MFTX1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFTX1B_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[16]"></a>MFTX2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFTX2A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[17]"></a>MFTX2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFTX2B_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[50]"></a>Make_Connection</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, chat.o(i.Make_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = Make_Connection &rArr; aci_gap_set_discoverable &rArr; GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_response_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_para_addr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tick
</UL>

<P><STRONG><a name="[15a]"></a>Mask_Unmask_DIV</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, rom_securitymgr.o(i.Mask_Unmask_DIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Mask_Unmask_DIV &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenEDIV_RecovDIV
</UL>

<P><STRONG><a name="[b4]"></a>Mem_assign</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mem_alloc.o(i.Mem_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mem_assign &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[15b]"></a>NVIC_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartIrqConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Configuration
</UL>

<P><STRONG><a name="[c]"></a>NVM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVM_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[55]"></a>Osal_MemCmp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Repeated_Attacks_Timer_cb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Long_Term_Key
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_SignedData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Search_BlackList
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Receive_Keys
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_PrivateAddr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[52]"></a>Osal_MemCpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Chat_Service
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Grp_Typ_Req_Pdu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Find_By_Typ_Val_Req_Pdu
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Resolvable_PrivateAddr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_LL_ADVERTISING_REPORT_Event_ISR
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Random_Addr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Long_Term_Key
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Found_Dev_In_Db
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_SignedData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Receive_Keys
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingConfirm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Master_Gen_Confirm_Val
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Gen_Confirm_Val
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Add_To_Database
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Val_Notify
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Val_Indicate
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_Unmask_DIV
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Hash
</UL>

<P><STRONG><a name="[63]"></a>Osal_MemSet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Reset_Context
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTimercb
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_assign
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Long_Term_Key
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_SignedData
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingConfirm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Master_Gen_Confirm_Val
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Gen_Confirm_Val
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Add_To_Database
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Serv_Database
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_Unmask_DIV
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Hash
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[15d]"></a>Prepare_Write_Resp</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, att.o(i.Prepare_Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Prepare_Write_Resp &rArr; Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_WRITE_PERMIT_REQ_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[fe]"></a>Process_Peer_Client_Data</STRONG> (Thumb, 556 bytes, Stack size 80 bytes, gatt_server.o(i.Process_Peer_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Process_Peer_Client_Data &rArr; Write_Cmd &rArr; SM_Validate_SignedData &rArr; Generate_SubKeys &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[fd]"></a>Process_Peer_Server_Data</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, gatt_server.o(i.Process_Peer_Server_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Process_Peer_Server_Data &rArr; Start_Gatt_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[94]"></a>RAL_Isr</STRONG> (Thumb, 3986 bytes, Stack size 104 bytes, ll_isr.o(i.RAL_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = RAL_Isr &rArr; go_to_connect &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_update_request
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rssi
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulo_37
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_white_list
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anchor_replace
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ExpiryCallback
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_update_proc_patch
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data_patch
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Handler
</UL>

<P><STRONG><a name="[5]"></a>RESET_HANDLER</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_bluenrg1.o(i.RESET_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = RESET_HANDLER &rArr; main &rArr; comm_service &rArr; ble_send_data &rArr; BTLE_StackTick &rArr; Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[204]"></a>RNG_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bluenrg1_rng.o(i.RNG_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_addr_create
</UL>

<P><STRONG><a name="[18]"></a>RTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.RTC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[161]"></a>Read_Blob_Resp</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, att.o(i.Read_Blob_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_Blob_Resp &rArr; Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[163]"></a>Read_By_Grp_Type_Resp</STRONG> (Thumb, 870 bytes, Stack size 120 bytes, att.o(i.Read_By_Grp_Type_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Read_By_Grp_Type_Resp &rArr; Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[15f]"></a>Read_By_Type_Resp</STRONG> (Thumb, 800 bytes, Stack size 144 bytes, att.o(i.Read_By_Type_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Read_By_Type_Resp &rArr; aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[162]"></a>Read_Multi_Resp</STRONG> (Thumb, 452 bytes, Stack size 104 bytes, att.o(i.Read_Multi_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Read_Multi_Resp &rArr; aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[c3]"></a>Read_RecordValidity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rom_sdb.o(i.Read_RecordValidity))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[160]"></a>Read_Resp</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, att.o(i.Read_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Read_Resp &rArr; Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[17e]"></a>Read_SDBRecord</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rom_sdb.o(i.Read_SDBRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_SDBRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRecord_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[17f]"></a>Reclassify_All_Channels</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ll_routines_master.o(i.Reclassify_All_Channels))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Reclassify_All_Channels
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[180]"></a>Resolve_PrivateAddr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rom_securitymgr.o(i.Resolve_PrivateAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Resolve_PrivateAddr &rArr; Calculate_Hash &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
</UL>

<P><STRONG><a name="[181]"></a>SDB_Add_Record</STRONG> (Thumb, 416 bytes, Stack size 128 bytes, sdb.o(i.SDB_Add_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvaliDate_Record
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Add_To_Database
</UL>

<P><STRONG><a name="[18b]"></a>SDB_Create</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sdb.o(i.SDB_Create))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Init
</UL>

<P><STRONG><a name="[ca]"></a>SDB_Delete</STRONG> (Thumb, 396 bytes, Stack size 1088 bytes, sdb.o(i.SDB_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
</UL>

<P><STRONG><a name="[183]"></a>SDB_Find_Matching_LTK</STRONG> (Thumb, 160 bytes, Stack size 128 bytes, rom_sdb.o(i.SDB_Find_Matching_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SDB_Find_Matching_LTK &rArr; SM_GenEDIV_RecovDIV &rArr; Mask_Unmask_DIV &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenEDIV_RecovDIV
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Found_Dev_In_Db
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diversify
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_SecurityDb_Start_Addr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_SecDb_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Long_Term_Key
</UL>

<P><STRONG><a name="[c6]"></a>SDB_Find_Record</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, sdb.o(i.SDB_Find_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SDB_Find_Record &rArr; Resolve_PrivateAddr &rArr; Calculate_Hash &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_PrivateAddr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Is_Device_Bonded
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Client_Data
</UL>

<P><STRONG><a name="[1c3]"></a>SDB_Get_GattDb_End_Addr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdb.o(i.SDB_Get_GattDb_End_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[c1]"></a>SDB_Get_GattDb_Start_Addr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdb.o(i.SDB_Get_GattDb_Start_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[dd]"></a>SDB_Get_Number_Of_Records</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rom_sdb.o(i.SDB_Get_Number_Of_Records))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDB_Get_Number_Of_Records &rArr; Get_SecRec_Len_In_Words
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_SecurityDb_Start_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
</UL>

<P><STRONG><a name="[184]"></a>SDB_Get_SecurityDb_Start_Addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdb.o(i.SDB_Get_SecurityDb_Start_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[187]"></a>SMTimercb</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, securitymgr.o(i.SMTimercb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SMTimercb &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PAIRING_CMPLT_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[b0]"></a>SM_Check_Encryption_KeySize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rom_securitymgr.o(i.SM_Check_Encryption_KeySize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SM_Check_Encryption_KeySize &rArr; SM_Find_Remote_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>

<P><STRONG><a name="[a5]"></a>SM_Find_Remote_Device</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, securitymgr.o(i.SM_Find_Remote_Device))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SM_Find_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Link_Security_Status
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_SignedData
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Set_Channel_Disconnected
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Is_Device_Bonded
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Client_Data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Check_Encryption_KeySize
</UL>

<P><STRONG><a name="[186]"></a>SM_Found_Dev_In_Db</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, rom_securitymgr.o(i.SM_Found_Dev_In_Db))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SM_Found_Dev_In_Db &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[185]"></a>SM_GenEDIV_RecovDIV</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, rom_securitymgr.o(i.SM_GenEDIV_RecovDIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SM_GenEDIV_RecovDIV &rArr; Mask_Unmask_DIV &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diversify
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_Unmask_DIV
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Long_Term_Key
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[11a]"></a>SM_Generate_IRK</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rom_securitymgr.o(i.SM_Generate_IRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SM_Generate_IRK &rArr; Diversify &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Resolvable_PrivateAddr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
</UL>

<P><STRONG><a name="[189]"></a>SM_Generate_Key</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, rom_securitymgr.o(i.SM_Generate_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SM_Generate_Key &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
</UL>

<P><STRONG><a name="[af]"></a>SM_Get_Link_Security_Status</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rom_securitymgr.o(i.SM_Get_Link_Security_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SM_Get_Link_Security_Status &rArr; SM_Find_Remote_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>

<P><STRONG><a name="[18a]"></a>SM_Get_Long_Term_Key</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, rom_securitymgr.o(i.SM_Get_Long_Term_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SM_Get_Long_Term_Key &rArr; SDB_Find_Matching_LTK &rArr; SM_GenEDIV_RecovDIV &rArr; Mask_Unmask_DIV &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenEDIV_RecovDIV
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diversify
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[8f]"></a>SM_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, securitymgr.o(i.SM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SM_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
</UL>

<P><STRONG><a name="[f9]"></a>SM_Is_Device_Bonded</STRONG> (Thumb, 72 bytes, Stack size 88 bytes, securitymgr.o(i.SM_Is_Device_Bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SM_Is_Device_Bonded &rArr; SDB_Find_Record &rArr; Resolve_PrivateAddr &rArr; Calculate_Hash &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[132]"></a>SM_L2CAP_Handler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, securitymgr.o(i.SM_L2CAP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = SM_L2CAP_Handler &rArr; sm_PairingCmplt &rArr; sm_Add_To_Database &rArr; SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[134]"></a>SM_L2CAP_Handler_ISR</STRONG> (Thumb, 490 bytes, Stack size 48 bytes, securitymgr.o(i.SM_L2CAP_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Search_BlackList
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Find_Remote_Device_Index
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Change_State
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PAIRING_CMPLT_Event_ISR
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[7a]"></a>SM_Process_Q</STRONG> (Thumb, 740 bytes, Stack size 152 bytes, securitymgr.o(i.SM_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 1800 + Unknown Stack Size
<LI>Call Chain = SM_Process_Q &rArr; sm_Receive_Keys &rArr; sm_PairingCmplt &rArr; sm_Add_To_Database &rArr; SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Head
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapIsPrivacySupported
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Long_Term_Key
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Found_Dev_In_Db
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SecurityRequest_Handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Reset_Timer
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Receive_Keys
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Parse_Pairing_Failed
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Response_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingRequest_Handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingConfirm
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Find_Remote_Device_Index
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_AUTHORIZATION_REQUEST_Event
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[1a4]"></a>SM_Repeated_Attacks_Timer_cb</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, securitymgr.o(i.SM_Repeated_Attacks_Timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SM_Repeated_Attacks_Timer_cb &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[1a5]"></a>SM_Send_Pairing_Request</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, securitymgr.o(i.SM_Send_Pairing_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SM_Send_Pairing_Request &rArr; sm_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Search_BlackList
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Reset_Timer
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Find_Remote_Device_Index
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SecurityRequest_Handler
</UL>

<P><STRONG><a name="[1a6]"></a>SM_Validate_SignedData</STRONG> (Thumb, 250 bytes, Stack size 120 bytes, securitymgr.o(i.SM_Validate_SignedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SM_Validate_SignedData &rArr; Generate_SubKeys &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_SubKeys
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_TO_NRG_32
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[e]"></a>SPI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.SPI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[118]"></a>STORE_LE_16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utils.o(i.STORE_LE_16))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTimercb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Parse_Pairing_Failed
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Response_Handler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingRequest_Handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[c4]"></a>STORE_LE_32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utils.o(i.STORE_LE_32))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Master_Gen_Confirm_Val
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Gen_Confirm_Val
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1a7]"></a>SdkEvalComIOConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdk_eval_com.o(i.SdkEvalComIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = SdkEvalComIOConfig &rArr; SdkEvalComUartInit &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartIrqConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_peripheral
</UL>

<P><STRONG><a name="[1b0]"></a>SdkEvalComIOReceiveData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdk_eval_com.o(i.SdkEvalComIOReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOUartIrqHandler
</UL>

<P><STRONG><a name="[1aa]"></a>SdkEvalComIOSendData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdk_eval_com.o(i.SdkEvalComIOSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SdkEvalComIOSendData &rArr; UART_GetFlagStatus &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1ad]"></a>SdkEvalComIOUartIrqHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sdk_eval_com.o(i.SdkEvalComIOUartIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SdkEvalComIOUartIrqHandler &rArr; UART_GetFlagStatus &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOReceiveData
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[1a8]"></a>SdkEvalComUartInit</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, sdk_eval_com.o(i.SdkEvalComUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SdkEvalComUartInit &rArr; GPIO_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRMU_PeripheralClockCmd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOConfig
</UL>

<P><STRONG><a name="[1a9]"></a>SdkEvalComUartIrqConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sdk_eval_com.o(i.SdkEvalComUartIrqConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SdkEvalComUartIrqConfig &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOConfig
</UL>

<P><STRONG><a name="[1b2]"></a>SdkEvalGetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[1fa]"></a>SdkEvalIdentification</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalIdentification))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_myself
</UL>

<P><STRONG><a name="[53]"></a>Search_Handle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rom_gatt_server.o(i.Search_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Search_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serv_Chng_Charac_Ind_Not
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
</UL>

<P><STRONG><a name="[b2]"></a>Search_Service_Handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gatt_server.o(i.Search_Service_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serv_Chng_Charac_Ind_Not
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
</UL>

<P><STRONG><a name="[b8]"></a>Send_Error_Resp</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, rom_att.o(i.Send_Error_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[10b]"></a>Send_Notif_Or_Ind</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, gatt_server.o(i.Send_Notif_Or_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Val_Notify
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Val_Indicate
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[109]"></a>Start_Gatt_Timer</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rom_gatt_server.o(i.Start_Gatt_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Start_Gatt_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[107]"></a>Stop_Gatt_Timer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rom_gatt_server.o(i.Stop_Gatt_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Stop_Gatt_Timer &rArr; Timer_StopOneShot &rArr; List_Circular_Remove_Node
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[1b6]"></a>SysCount_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock.o(i.SysCount_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bluenrg1_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SysTick_Handler &rArr; ble_time &rArr; active_disconnect &rArr; aci_gap_terminate &rArr; GAP_Terminate_Link &rArr; LL_Disconnect_Link &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_time
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCount_Handler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1b9]"></a>SystemInit</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, system_bluenrg1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemInit &rArr; DeviceConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_myself
</UL>

<P><STRONG><a name="[7d]"></a>SystemSleepCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(i.SystemSleepCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
</UL>

<P><STRONG><a name="[1bd]"></a>Timer_Expired</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gp_timer.o(i.Timer_Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
</UL>

<P><STRONG><a name="[168]"></a>Timer_ExpiryCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, host_timer.o(i.Timer_ExpiryCallback))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[8b]"></a>Timer_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, host_timer.o(i.Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
</UL>

<P><STRONG><a name="[77]"></a>Timer_ProcessQ</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, host_timer.o(i.Timer_ProcessQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Timer_ProcessQ &rArr; TimerCallback &rArr; GAP_PrivateAddrTimercb &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[1bf]"></a>Timer_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gp_timer.o(i.Timer_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
</UL>

<P><STRONG><a name="[e1]"></a>Timer_StartOneShot</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, host_timer.o(i.Timer_StartOneShot))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerAcc_sysT32_ms
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Reset_Timer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
</UL>

<P><STRONG><a name="[127]"></a>Timer_StartOneShot_sysTime32</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, host_timer.o(i.Timer_StartOneShot_sysTime32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_sysT32
</UL>

<P><STRONG><a name="[e5]"></a>Timer_StopOneShot</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, host_timer.o(i.Timer_StopOneShot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Timer_StopOneShot &rArr; List_Circular_Remove_Node
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimer_Stop
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Reset_Timer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Parse_Pairing_Failed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Reset_To_Closed_State
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[1b1]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UART_ClearITPendingBit &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOUartIrqHandler
</UL>

<P><STRONG><a name="[1b4]"></a>UART_Cmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UART_Cmd &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[1ab]"></a>UART_GetFlagStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UART_GetFlagStatus &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOUartIrqHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOSendData
</UL>

<P><STRONG><a name="[1ae]"></a>UART_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UART_GetITStatus &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOUartIrqHandler
</UL>

<P><STRONG><a name="[d]"></a>UART_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.UART_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UART_Handler &rArr; SdkEvalComIOUartIrqHandler &rArr; UART_GetFlagStatus &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOUartIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1b5]"></a>UART_ITConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UART_ITConfig &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartIrqConfig
</UL>

<P><STRONG><a name="[1b3]"></a>UART_Init</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[1af]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOUartIrqHandler
</UL>

<P><STRONG><a name="[1ac]"></a>UART_SendData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UART_SendData &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOSendData
</UL>

<P><STRONG><a name="[a4]"></a>ValidLinkPermRequest</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, att.o(i.ValidLinkPermRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ValidLinkPermRequest &rArr; Check_Permission &rArr; SM_Get_Link_Security_Status &rArr; SM_Find_Remote_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
</UL>

<P><STRONG><a name="[1c1]"></a>WDG_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_chat_main.o(i.WDG_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = WDG_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SetReload
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRMU_PeripheralClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_peripheral
</UL>

<P><STRONG><a name="[1fd]"></a>WDG_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_wdg.o(i.WDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_peripheral
</UL>

<P><STRONG><a name="[10]"></a>WDG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.WDG_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1c2]"></a>WDG_SetReload</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg1_wdg.o(i.WDG_SetReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WDG_SetReload &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Configuration
</UL>

<P><STRONG><a name="[1e9]"></a>WindowWiden1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rom_ll_timehandling.o(i.WindowWiden1))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1eb]"></a>WindowWiden2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rom_ll_timehandling.o(i.WindowWiden2))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[c9]"></a>Write_Client_Data</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, sdb.o(i.Write_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvaliDate_Record
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_GattDb_Start_Addr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_GattDb_End_Addr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
</UL>

<P><STRONG><a name="[165]"></a>Write_Cmd</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, att.o(i.Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Write_Cmd &rArr; SM_Validate_SignedData &rArr; Generate_SubKeys &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_SignedData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_WRITE_PERMIT_REQ_Event
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_ATTRIBUTE_MODIFIED_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[164]"></a>Write_Resp</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, att.o(i.Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Write_Resp &rArr; aci_GATT_ATTRIBUTE_MODIFIED_Event &rArr; aci_gatt_attribute_modified_event &rArr; Attribute_Modified_CB &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_WRITE_PERMIT_REQ_Event
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_ATTRIBUTE_MODIFIED_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[182]"></a>Write_SDBRecord</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sdb.o(i.Write_SDBRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Write_SDBRecord &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_TO_NRG_32
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_With_NOP_Cycles
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
</UL>

<P><STRONG><a name="[87]"></a>_BlueNRG_Stack_Initialization</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, bluenrg_main_func.o(i._BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_RAM_and_Layers &rArr; LL_Init &rArr; Blue_Init_Global &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_and_Layers
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[f1]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, host_timer.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Receive_Keys
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[17b]"></a>__low_level_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_bluenrg1.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[3f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1d6]"></a>aci_att_find_by_type_value_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_att_find_by_type_value_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event
</UL>

<P><STRONG><a name="[1d8]"></a>aci_att_find_info_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_att_find_info_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_FIND_INFORMATION_RESP_Event
</UL>

<P><STRONG><a name="[1d9]"></a>aci_att_read_blob_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_att_read_blob_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_READ_BLOB_RESP_Event
</UL>

<P><STRONG><a name="[1db]"></a>aci_att_read_by_group_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_att_read_by_group_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_READ_BY_GROUP_RESP_Event
</UL>

<P><STRONG><a name="[1d4]"></a>aci_att_read_by_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_att_read_by_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_ATT_READ_BY_TYPE_RESP_Event
</UL>

<P><STRONG><a name="[1dc]"></a>aci_att_read_multiple_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_att_read_multiple_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_READ_MULTIPLE_RESP_Event
</UL>

<P><STRONG><a name="[1dd]"></a>aci_att_read_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_att_read_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_READ_RESP_Event
</UL>

<P><STRONG><a name="[194]"></a>aci_gap_addr_not_resolved_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_addr_not_resolved_event))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[1cb]"></a>aci_gap_authorization_req_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_authorization_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_AUTHORIZATION_REQUEST_Event
</UL>

<P><STRONG><a name="[198]"></a>aci_gap_bond_lost_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_bond_lost_event))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[192]"></a>aci_gap_bond_lost_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_bond_lost_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[9d]"></a>aci_gap_init</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bluenrg_gap_aci.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = aci_gap_init &rArr; GAP_Init &rArr; Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
</UL>

<P><STRONG><a name="[1d1]"></a>aci_gap_limited_discoverable_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_limited_discoverable_event))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_SET_LIMITED_DISCOVERABLE_Event
</UL>

<P><STRONG><a name="[1cc]"></a>aci_gap_pairing_complete_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_pairing_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PAIRING_CMPLT_Event
</UL>

<P><STRONG><a name="[1cd]"></a>aci_gap_pairing_complete_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_pairing_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PAIRING_CMPLT_Event_ISR
</UL>

<P><STRONG><a name="[1cf]"></a>aci_gap_pass_key_req_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_pass_key_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PASS_KEY_REQUEST_Event
</UL>

<P><STRONG><a name="[1d0]"></a>aci_gap_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PROCEDURE_COMPLETE_Event
</UL>

<P><STRONG><a name="[d6]"></a>aci_gap_proc_complete_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_proc_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[159]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, bluenrg_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = aci_gap_set_discoverable &rArr; GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aci_gap_set_discoverable_param_check
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
</UL>

<P><STRONG><a name="[18d]"></a>aci_gap_slave_security_initiated_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gap_slave_security_initiated_event))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
</UL>

<P><STRONG><a name="[1e3]"></a>aci_gap_terminate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bluenrg_gap_aci.o(i.aci_gap_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = aci_gap_terminate &rArr; GAP_Terminate_Link &rArr; LL_Disconnect_Link &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Terminate_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_disconnect
</UL>

<P><STRONG><a name="[71]"></a>aci_gatt_add_char</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Chat_Service
</UL>

<P><STRONG><a name="[70]"></a>aci_gatt_add_service</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = aci_gatt_add_service &rArr; Gatt_Add_Service &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Chat_Service
</UL>

<P><STRONG><a name="[1d2]"></a>aci_gatt_attribute_modified_event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chat.o(i.aci_gatt_attribute_modified_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = aci_gatt_attribute_modified_event &rArr; Attribute_Modified_CB &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_ATTRIBUTE_MODIFIED_Event
</UL>

<P><STRONG><a name="[1de]"></a>aci_gatt_disc_read_char_by_uuid_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_disc_read_char_by_uuid_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_DISC_READ_CHARAC_BY_UUID_RESP_Event
</UL>

<P><STRONG><a name="[1df]"></a>aci_gatt_error_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_error_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ERROR_RESP_Event
</UL>

<P><STRONG><a name="[166]"></a>aci_gatt_indication_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_indication_event))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
</UL>

<P><STRONG><a name="[9c]"></a>aci_gatt_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = aci_gatt_init &rArr; Gatt_Server_Init &rArr; Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
</UL>

<P><STRONG><a name="[167]"></a>aci_gatt_notification_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
</UL>

<P><STRONG><a name="[101]"></a>aci_gatt_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_PROCEDURE_COMPLETE_Event
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[f8]"></a>aci_gatt_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[1e0]"></a>aci_gatt_read_multi_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_read_multi_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event
</UL>

<P><STRONG><a name="[17c]"></a>aci_gatt_read_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, chat.o(i.aci_gatt_read_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
</UL>

<P><STRONG><a name="[108]"></a>aci_gatt_rx_confirm_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_rx_confirm_event))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[10a]"></a>aci_gatt_tx_pool_available_event</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, chat.o(i.aci_gatt_tx_pool_available_event))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[9e]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bluenrg_gatt_aci.o(i.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = aci_gatt_update_char_value &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
</UL>

<P><STRONG><a name="[1e1]"></a>aci_gatt_write_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_gatt_write_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_WRITE_PERMIT_REQ_Event
</UL>

<P><STRONG><a name="[9b]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aci_hal_set_tx_power_level &rArr; HAL_Set_TX_Power_Level
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
</UL>

<P><STRONG><a name="[9a]"></a>aci_hal_write_config_data</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg_hal_aci.o(i.aci_hal_write_config_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = aci_hal_write_config_data &rArr; HAL_Write_ConfigData &rArr; LL_Set_Address &rArr; is_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Write_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
</UL>

<P><STRONG><a name="[13a]"></a>aci_l2cap_command_reject_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_l2cap_command_reject_event))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[138]"></a>aci_l2cap_connection_update_req_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_l2cap_connection_update_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[139]"></a>aci_l2cap_connection_update_resp_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_l2cap_connection_update_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[137]"></a>aci_l2cap_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_l2cap_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
</UL>

<P><STRONG><a name="[200]"></a>aci_ll_acl_data_ind_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_ll_acl_data_ind_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[1ff]"></a>aci_ll_acl_tx_complete_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.aci_ll_acl_tx_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[1e4]"></a>active_disconnect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, chat.o(i.active_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = active_disconnect &rArr; aci_gap_terminate &rArr; GAP_Terminate_Link &rArr; LL_Disconnect_Link &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_time
</UL>

<P><STRONG><a name="[173]"></a>advance_slave_timing_MultiSlave</STRONG> (Thumb, 862 bytes, Stack size 88 bytes, multi_master_time.o(i.advance_slave_timing_MultiSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = advance_slave_timing_MultiSlave &rArr; set_sca
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulo_37
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset2
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset1
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sca
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microseconds_to_machine_time
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden2
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden1
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_short_int
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_int
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_char
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[209]"></a>advance_transmit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, rom_ll_routines_support.o(i.advance_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = advance_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_advance_transmit
</UL>

<P><STRONG><a name="[144]"></a>advance_wakeup_timer</STRONG> (Thumb, 864 bytes, Stack size 88 bytes, advance_wakeup_time.o(i.advance_wakeup_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>

<P><STRONG><a name="[177]"></a>anchor_replace</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, multi_master_time.o(i.anchor_replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = anchor_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
</UL>

<P><STRONG><a name="[a0]"></a>assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_chat_main.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SetReload
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordBurst
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRMU_PeripheralClockCmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2BcdAscii
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_request
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cell_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cell_data
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_service
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_receive
</UL>

<P><STRONG><a name="[99]"></a>ble_para_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, para_unit.o(i.ble_para_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_frame
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ble_para
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ble_para
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
</UL>

<P><STRONG><a name="[1f3]"></a>ble_send_data</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, chat.o(i.ble_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = ble_send_data &rArr; BTLE_StackTick &rArr; Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_service
</UL>

<P><STRONG><a name="[1b8]"></a>ble_time</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, chat.o(i.ble_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_time &rArr; active_disconnect &rArr; aci_gap_terminate &rArr; GAP_Terminate_Link &rArr; LL_Disconnect_Link &rArr; get_connection_no
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[141]"></a>cancel_current_master</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, multi_master_time.o(i.cancel_current_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cancel_current_master
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_short_int
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_int
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_char
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[1f1]"></a>cancel_master</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, rom_ll_isr_routines.o(i.cancel_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = cancel_master &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anchor_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[1f2]"></a>cancel_slave</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, isr_routines.o(i.cancel_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_update_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[97]"></a>char_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal.o(i.char_copy))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params_patch
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Set_Radio_Config_Data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
</UL>

<P><STRONG><a name="[16b]"></a>check_white_list</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rom_ll_white_list.o(i.check_white_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_white_list
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1f5]"></a>clear_para</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, para_center.o(i.clear_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = clear_para &rArr; FLASH_ErasePage &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_para
</UL>

<P><STRONG><a name="[1d]"></a>comm_receive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, comm.o(i.comm_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = comm_receive &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_chat_main.o(i.initial_peripheral)
</UL>
<P><STRONG><a name="[1f6]"></a>comm_service</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, comm.o(i.comm_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = comm_service &rArr; ble_send_data &rArr; BTLE_StackTick &rArr; Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_frame
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>comm_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, comm.o(i.comm_time))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[149]"></a>convert_power</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rom_ll_routines_support.o(i.convert_power))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Tx_Power_Level
</UL>

<P><STRONG><a name="[92]"></a>deepSleepTimers_check</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bluenrg_main_func.o(i.deepSleepTimers_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = deepSleepTimers_check
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Deep_Sleep_Check
</UL>

<P><STRONG><a name="[147]"></a>encrypt</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, rom_ll_routines_support.o(i.encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>

<P><STRONG><a name="[1a]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdk_eval_com.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; SdkEvalComIOSendData &rArr; UART_GetFlagStatus &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>get_adv_addr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rom_ll_isr_routines.o(i.get_adv_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_adv_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[13e]"></a>get_advertiser</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, multi_master_time.o(i.get_advertiser))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[13c]"></a>get_connection_no</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, multi_master_time.o(i.get_connection_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>

<P><STRONG><a name="[13f]"></a>get_next_free_slot</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, multi_master_time.o(i.get_next_free_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_next_free_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[169]"></a>get_scan_addr</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rom_ll_isr_routines.o(i.get_scan_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_scan_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[142]"></a>get_scan_connection</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, multi_master_time.o(i.get_scan_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
</UL>

<P><STRONG><a name="[207]"></a>get_valid_stamp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, para_center.o(i.get_valid_stamp))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
</UL>

<P><STRONG><a name="[16c]"></a>go_to_connect</STRONG> (Thumb, 586 bytes, Stack size 88 bytes, rom_ll_isr_routines.o(i.go_to_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = go_to_connect &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timebase_start_connect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[175]"></a>go_to_connect_master</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, isr_routines.o(i.go_to_connect_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = go_to_connect_master &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timebase_start_connect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[5b]"></a>hci_disconnection_complete_event_isr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, chat.o(i.hci_disconnection_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[5c]"></a>hci_encryption_change_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.hci_encryption_change_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[5f]"></a>hci_encryption_key_refresh_complete_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.hci_encryption_key_refresh_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[61]"></a>hci_le_advertising_report_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.hci_le_advertising_report_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_LL_ADVERTISING_REPORT_Event_ISR
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[5d]"></a>hci_le_connection_complete_event_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chat.o(i.hci_le_connection_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[5e]"></a>hci_le_connection_update_complete_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.hci_le_connection_update_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[60]"></a>hci_le_long_term_key_request_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.hci_le_long_term_key_request_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[5a]"></a>hci_le_read_remote_used_features_complete_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.hci_le_read_remote_used_features_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[158]"></a>hci_le_set_scan_response_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hci.o(i.hci_le_set_scan_response_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hci_le_set_scan_response_data &rArr; LL_Set_Scan_Resp_Data_patch &rArr; LL_Set_Scan_Resp_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Scan_Resp_Data_patch
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_Connection
</UL>

<P><STRONG><a name="[59]"></a>hci_read_remote_version_information_complete_event_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aci_events.o(i.hci_read_remote_version_information_complete_event_isr))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>

<P><STRONG><a name="[1f9]"></a>initial_myself</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_chat_main.o(i.initial_myself))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initial_myself &rArr; SystemInit &rArr; DeviceConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalIdentification
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fc]"></a>initial_peripheral</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ble_chat_main.o(i.initial_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = initial_peripheral &rArr; CHAT_DeviceInit &rArr; Add_Chat_Service &rArr; aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOConfig
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Enable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAT_DeviceInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Configuration
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>is_connected</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, rom_ll_ll_routines.o(i.is_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Address
</UL>

<P><STRONG><a name="[13d]"></a>is_slave</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, multi_master_time.o(i.is_slave))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Disconnect_Link
</UL>

<P><STRONG><a name="[179]"></a>isr_event_handler_patched</STRONG> (Thumb, 1196 bytes, Stack size 168 bytes, ll_routines_master.o(i.isr_event_handler_patched))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_ll_acl_tx_complete_event_isr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_ll_acl_data_ind_event_isr
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Event_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
</UL>

<P><STRONG><a name="[17a]"></a>isr_postproc</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, isr_postproc.o(i.isr_postproc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = isr_postproc &rArr; Hal_Get_Random_Number32
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[170]"></a>isr_postproc1</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, rom_ll_isr_postproc.o(i.isr_postproc1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = isr_postproc1 &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[201]"></a>load_ble_para</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, para_center.o(i.load_ble_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = load_ble_para &rArr; load_cell_data &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_cell_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_para_addr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
</UL>

<P><STRONG><a name="[202]"></a>load_cell_data</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, para_center.o(i.load_cell_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = load_cell_data &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ble_para
</UL>

<P><STRONG><a name="[203]"></a>mac_addr_create</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, para_unit.o(i.mac_addr_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mac_addr_create
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
</UL>

<P><STRONG><a name="[155]"></a>machine_time_trans</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rom_ll_timehandling.o(i.machine_time_trans))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_freq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepSleepTimers_check
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ble_chat_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2024 + Unknown Stack Size
<LI>Call Chain = main &rArr; comm_service &rArr; ble_send_data &rArr; BTLE_StackTick &rArr; Gatt_Process_Q &rArr; Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Serv_Database &rArr; Flash_Write_Client_Data &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_SetReload
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_service
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_service
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Tick
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_peripheral
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_myself
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ed]"></a>microseconds_to_machine_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, routines_support.o(i.microseconds_to_machine_time))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[172]"></a>modulo_37</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rom_ll_routines_support.o(i.modulo_37))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[14c]"></a>nsar_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, multi_master_time.o(i.nsar_init))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init_patch
</UL>

<P><STRONG><a name="[1fe]"></a>para_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, para_center.o(i.para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = para_init &rArr; save_all_para &rArr; save_ble_para &rArr; save_cell_data &rArr; FLASH_ProgramWordBurst &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_addr_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_para
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_ble_para
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_valid_stamp
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_peripheral
</UL>

<P><STRONG><a name="[205]"></a>para_service</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, para_center.o(i.para_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = para_service &rArr; save_all_para &rArr; save_ble_para &rArr; save_cell_data &rArr; FLASH_ProgramWordBurst &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_para
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>patch_advance_transmit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, routines_support.o(i.patch_advance_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = patch_advance_transmit &rArr; advance_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Deep_Sleep_Check
</UL>

<P><STRONG><a name="[1f7]"></a>process_frame</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, comm.o(i.process_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = process_frame &rArr; Hex2BcdAscii &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hex2BcdAscii
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_request
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_para_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comm_service
</UL>

<P><STRONG><a name="[178]"></a>read_rssi</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ll_routines.o(i.read_rssi))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[145]"></a>request_scan_slot</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, multi_master_time.o(i.request_scan_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = request_scan_slot &rArr; adapt_slot &rArr; nsar_searchBestFreeSlot &rArr; nsar_updateBestFreeSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
</UL>

<P><STRONG><a name="[208]"></a>save_all_para</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, para_center.o(i.save_all_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = save_all_para &rArr; save_ble_para &rArr; save_cell_data &rArr; FLASH_ProgramWordBurst &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ble_para
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_para
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_service
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_init
</UL>

<P><STRONG><a name="[20b]"></a>save_ble_para</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, para_center.o(i.save_ble_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = save_ble_para &rArr; save_cell_data &rArr; FLASH_ProgramWordBurst &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cell_data
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_para_addr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_all_para
</UL>

<P><STRONG><a name="[20c]"></a>save_cell_data</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, para_center.o(i.save_cell_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = save_cell_data &rArr; FLASH_ProgramWordBurst &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWordBurst
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ble_para
</UL>

<P><STRONG><a name="[20a]"></a>save_request</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, para_center.o(i.save_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = save_request &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_frame
</UL>

<P><STRONG><a name="[140]"></a>schedule_advertise_slot</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, multi_master_time.o(i.schedule_advertise_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[112]"></a>send_gatt_event</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gatt_client.o(i.send_gatt_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = send_gatt_event &rArr; aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_READ_BY_GROUP_RESP_Event
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_FIND_INFORMATION_RESP_Event
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GATT_ATT_READ_BY_TYPE_RESP_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[91]"></a>set_freq</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rom_ll_timehandling.o(i.set_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_freq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>

<P><STRONG><a name="[1e8]"></a>set_sca</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, rom_ll_timehandling.o(i.set_sca))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_sca
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[174]"></a>set_string</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal.o(i.set_string))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[6d]"></a>slave_advance</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, routines_support.o(i.slave_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = slave_advance &rArr; LL_Sleep_Req
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Packet
</UL>

<P><STRONG><a name="[f7]"></a>sm_Set_Channel_Disconnected</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, securitymgr.o(i.sm_Set_Channel_Disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_Set_Channel_Disconnected &rArr; SM_Find_Remote_Device
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Find_Remote_Device
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[146]"></a>start_timebase</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, multi_master_time.o(i.start_timebase))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan_patched
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
</UL>

<P><STRONG><a name="[10c]"></a>store_data</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gatt_server.o(i.store_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = store_data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Serv_Database
</UL>

<P><STRONG><a name="[176]"></a>system_time_trans</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rom_ll_timehandling.o(i.system_time_trans))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
</UL>

<P><STRONG><a name="[1ea]"></a>time_offset1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rom_ll_timehandling.o(i.time_offset1))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1ec]"></a>time_offset2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rom_ll_timehandling.o(i.time_offset2))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1f8]"></a>timebase_start_connect</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, multi_master_time.o(i.timebase_start_connect))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
</UL>

<P><STRONG><a name="[16f]"></a>unpack_channel_map</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rom_ll_isr_routines.o(i.unpack_channel_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = unpack_channel_map
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[16e]"></a>unpack_update_request</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rom_ll_isr_routines.o(i.unpack_update_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = unpack_update_request
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ba]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7c]"></a>BlueNRG_InternalSleep</STRONG> (Thumb, 1412 bytes, Stack size 584 bytes, sleep.o(i.BlueNRG_InternalSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = BlueNRG_InternalSleep &rArr; DeviceConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimer_Stop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextSave
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[1e2]"></a>_aci_gap_set_discoverable_param_check</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bluenrg_gap_aci.o(i._aci_gap_set_discoverable_param_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _aci_gap_set_discoverable_param_check
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[1ca]"></a>_load_uuid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bluenrg_gatt_aci.o(i._load_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _load_uuid &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[1bb]"></a>TimerCallback</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, host_timer.o(i.TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = TimerCallback &rArr; GAP_PrivateAddrTimercb &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Repeated_Attacks_Timer_cb
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTimercb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_TimeOut_Handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
</UL>

<P><STRONG><a name="[124]"></a>Timer_sysTime32_convMachineTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, host_timer.o(i.Timer_sysTime32_convMachineTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_sysTime32_convMachineTime
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
</UL>

<P><STRONG><a name="[e8]"></a>_gap_set_discoverable</STRONG> (Thumb, 440 bytes, Stack size 96 bytes, gap.o(i._gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = _gap_set_discoverable &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Acl_Event_Handler &rArr; L2C_Rcv_Event_Handler_ISR &rArr; Gatt_Server_L2C_Handler &rArr; Send_Notif_Or_Ind &rArr; Handle_Val_Notify &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Params
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params_patch
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data_patch
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Address
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Tx_Power_Level
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Random_Addr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
</UL>

<P><STRONG><a name="[cd]"></a>aci_GAP_PROCEDURE_COMPLETE_Event</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gap.o(i.aci_GAP_PROCEDURE_COMPLETE_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GAP_PROCEDURE_COMPLETE_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Internal_Evt_Handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
</UL>

<P><STRONG><a name="[da]"></a>aci_GAP_SET_LIMITED_DISCOVERABLE_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gap.o(i.aci_GAP_SET_LIMITED_DISCOVERABLE_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GAP_SET_LIMITED_DISCOVERABLE_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>

<P><STRONG><a name="[d5]"></a>aci_LL_ADVERTISING_REPORT_Event_ISR</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, gap.o(i.aci_LL_ADVERTISING_REPORT_Event_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = aci_LL_ADVERTISING_REPORT_Event_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Parse_Advertising_Report
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[1d3]"></a>aci_GATT_ATT_READ_BY_TYPE_RESP_Event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_client.o(i.aci_GATT_ATT_READ_BY_TYPE_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_ATT_READ_BY_TYPE_RESP_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_type_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_event
</UL>

<P><STRONG><a name="[1d5]"></a>aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event</STRONG> (Thumb, 42 bytes, Stack size 136 bytes, gatt_client.o(i.aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aci_GATT_L2CAP_ATT_FIND_BY_TYPE_VAL_RESP_Event &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_by_type_value_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_event
</UL>

<P><STRONG><a name="[1d7]"></a>aci_GATT_L2CAP_ATT_FIND_INFORMATION_RESP_Event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_client.o(i.aci_GATT_L2CAP_ATT_FIND_INFORMATION_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_L2CAP_ATT_FIND_INFORMATION_RESP_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_info_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_event
</UL>

<P><STRONG><a name="[116]"></a>aci_GATT_L2CAP_ATT_READ_BLOB_RESP_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_client.o(i.aci_GATT_L2CAP_ATT_READ_BLOB_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_L2CAP_ATT_READ_BLOB_RESP_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[1da]"></a>aci_GATT_L2CAP_ATT_READ_BY_GROUP_RESP_Event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_client.o(i.aci_GATT_L2CAP_ATT_READ_BY_GROUP_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_L2CAP_ATT_READ_BY_GROUP_RESP_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_group_type_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_gatt_event
</UL>

<P><STRONG><a name="[115]"></a>aci_GATT_L2CAP_ATT_READ_MULTIPLE_RESP_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_client.o(i.aci_GATT_L2CAP_ATT_READ_MULTIPLE_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_L2CAP_ATT_READ_MULTIPLE_RESP_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[114]"></a>aci_GATT_L2CAP_ATT_READ_RESP_Event</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatt_client.o(i.aci_GATT_L2CAP_ATT_READ_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_L2CAP_ATT_READ_RESP_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[110]"></a>aci_GATT_L2CAP_DISC_READ_CHARAC_BY_UUID_RESP_Event</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gatt_client.o(i.aci_GATT_L2CAP_DISC_READ_CHARAC_BY_UUID_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_L2CAP_DISC_READ_CHARAC_BY_UUID_RESP_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[10f]"></a>aci_GATT_L2CAP_ERROR_RESP_Event</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gatt_client.o(i.aci_GATT_L2CAP_ERROR_RESP_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = aci_GATT_L2CAP_ERROR_RESP_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[113]"></a>aci_GATT_L2CAP_PROCEDURE_COMPLETE_Event</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gatt_client.o(i.aci_GATT_L2CAP_PROCEDURE_COMPLETE_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_L2CAP_PROCEDURE_COMPLETE_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler
</UL>

<P><STRONG><a name="[105]"></a>GATT_Server_Set_Flag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gatt_server.o(i.GATT_Server_Set_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[1e5]"></a>adapt_slot</STRONG> (Thumb, 606 bytes, Stack size 88 bytes, multi_master_time.o(i.adapt_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = adapt_slot &rArr; nsar_searchBestFreeSlot &rArr; nsar_updateBestFreeSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_searchBestFreeSlot
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_insertSlotListEntry
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_scan_slot
</UL>

<P><STRONG><a name="[1e6]"></a>nsar_insertSlotListEntry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multi_master_time.o(i.nsar_insertSlotListEntry))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[1e7]"></a>nsar_searchBestFreeSlot</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, multi_master_time.o(i.nsar_searchBestFreeSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = nsar_searchBestFreeSlot &rArr; nsar_updateBestFreeSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_updateBestFreeSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[206]"></a>nsar_updateBestFreeSlot</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, multi_master_time.o(i.nsar_updateBestFreeSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nsar_updateBestFreeSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_searchBestFreeSlot
</UL>

<P><STRONG><a name="[1ee]"></a>swap_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multi_master_time.o(i.swap_char))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1f0]"></a>swap_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multi_master_time.o(i.swap_int))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1ef]"></a>swap_short_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, multi_master_time.o(i.swap_short_int))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[b5]"></a>Erase_Sector</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdb.o(i.Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Erase_Sector &rArr; FLASH_ErasePage &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
</UL>

<P><STRONG><a name="[c7]"></a>Flash_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sdb.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
</UL>

<P><STRONG><a name="[195]"></a>aci_GAP_AUTHORIZATION_REQUEST_Event</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, securitymgr.o(i.aci_GAP_AUTHORIZATION_REQUEST_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GAP_AUTHORIZATION_REQUEST_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
</UL>

<P><STRONG><a name="[188]"></a>aci_GAP_PAIRING_CMPLT_Event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, securitymgr.o(i.aci_GAP_PAIRING_CMPLT_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GAP_PAIRING_CMPLT_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTimercb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Parse_Pairing_Failed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
</UL>

<P><STRONG><a name="[191]"></a>aci_GAP_PAIRING_CMPLT_Event_ISR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, securitymgr.o(i.aci_GAP_PAIRING_CMPLT_Event_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GAP_PAIRING_CMPLT_Event_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[1ce]"></a>aci_GAP_PASS_KEY_REQUEST_Event</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, securitymgr.o(i.aci_GAP_PASS_KEY_REQUEST_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GAP_PASS_KEY_REQUEST_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Response_Handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingRequest_Handler
</UL>

<P><STRONG><a name="[20d]"></a>sm_Add_To_Database</STRONG> (Thumb, 294 bytes, Stack size 152 bytes, securitymgr.o(i.sm_Add_To_Database))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + Unknown Stack Size
<LI>Call Chain = sm_Add_To_Database &rArr; SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingRequest_Handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
</UL>

<P><STRONG><a name="[190]"></a>sm_Change_State</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, securitymgr.o(i.sm_Change_State))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Receive_Keys
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[197]"></a>sm_Distribute_Keys</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, securitymgr.o(i.sm_Distribute_Keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sm_Distribute_Keys &rArr; SM_GenEDIV_RecovDIV &rArr; Mask_Unmask_DIV &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_IRK
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_GenEDIV_RecovDIV
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diversify
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Generate_CSRK
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[18f]"></a>sm_Find_Remote_Device_Index</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, securitymgr.o(i.sm_Find_Remote_Device_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_Find_Remote_Device_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Parse_Pairing_Failed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[20f]"></a>sm_Gen_Confirm_Val</STRONG> (Thumb, 394 bytes, Stack size 72 bytes, securitymgr.o(i.sm_Gen_Confirm_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sm_Gen_Confirm_Val &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingConfirm
</UL>

<P><STRONG><a name="[20e]"></a>sm_Generate_CSRK</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, securitymgr.o(i.sm_Generate_CSRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sm_Generate_CSRK &rArr; Diversify &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
</UL>

<P><STRONG><a name="[1a0]"></a>sm_Get_TX_Packet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, securitymgr.o(i.sm_Get_TX_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_Get_TX_Packet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Response_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingRequest_Handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingConfirm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
</UL>

<P><STRONG><a name="[210]"></a>sm_Master_Gen_Confirm_Val</STRONG> (Thumb, 376 bytes, Stack size 72 bytes, securitymgr.o(i.sm_Master_Gen_Confirm_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sm_Master_Gen_Confirm_Val &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
</UL>

<P><STRONG><a name="[18c]"></a>sm_PairingCmplt</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, securitymgr.o(i.sm_PairingCmplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = sm_PairingCmplt &rArr; sm_Add_To_Database &rArr; SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Find_Remote_Device_Index
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Add_To_Database
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PAIRING_CMPLT_Event_ISR
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_AUTHORIZATION_REQUEST_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Receive_Keys
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
</UL>

<P><STRONG><a name="[19c]"></a>sm_PairingConfirm</STRONG> (Thumb, 128 bytes, Stack size 144 bytes, securitymgr.o(i.sm_PairingConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sm_PairingConfirm &rArr; sm_Gen_Confirm_Val &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Gen_Confirm_Val
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[19a]"></a>sm_PairingRequest_Handler</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, securitymgr.o(i.sm_PairingRequest_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = sm_PairingRequest_Handler &rArr; sm_Add_To_Database &rArr; SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Select_STK_Method
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Add_To_Database
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PASS_KEY_REQUEST_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[212]"></a>sm_Pairing_Failed</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, securitymgr.o(i.sm_Pairing_Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sm_Pairing_Failed &rArr; sm_RepeatedAttacks_Protection &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Find_Remote_Device_Index
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PAIRING_CMPLT_Event
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_SRand_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Response_Handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingRequest_Handler
</UL>

<P><STRONG><a name="[196]"></a>sm_Pairing_MConfirm_Sender</STRONG> (Thumb, 112 bytes, Stack size 144 bytes, securitymgr.o(i.sm_Pairing_MConfirm_Sender))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sm_Pairing_MConfirm_Sender &rArr; sm_Master_Gen_Confirm_Val &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Master_Gen_Confirm_Val
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Response_Handler
</UL>

<P><STRONG><a name="[19f]"></a>sm_Pairing_Response_Handler</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, securitymgr.o(i.sm_Pairing_Response_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sm_Pairing_Response_Handler &rArr; sm_Pairing_MConfirm_Sender &rArr; sm_Master_Gen_Confirm_Val &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Select_STK_Method
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PASS_KEY_REQUEST_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[1a3]"></a>sm_Pairing_SRand_Handler</STRONG> (Thumb, 270 bytes, Stack size 176 bytes, securitymgr.o(i.sm_Pairing_SRand_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sm_Pairing_SRand_Handler &rArr; sm_Master_Gen_Confirm_Val &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Key
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Master_Gen_Confirm_Val
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[1a2]"></a>sm_Parse_Pairing_Failed</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, securitymgr.o(i.sm_Parse_Pairing_Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sm_Parse_Pairing_Failed &rArr; sm_RepeatedAttacks_Protection &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Find_Remote_Device_Index
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_GAP_PAIRING_CMPLT_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[19e]"></a>sm_Receive_Keys</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, securitymgr.o(i.sm_Receive_Keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = sm_Receive_Keys &rArr; sm_PairingCmplt &rArr; sm_Add_To_Database &rArr; SDB_Add_Record &rArr; SDB_Delete &rArr; Write_Client_Data &rArr; Flash_Write &rArr; FLASH_ProgramWord &rArr; assert_failed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingCmplt
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Change_State
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[213]"></a>sm_RepeatedAttacks_Protection</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, securitymgr.o(i.sm_RepeatedAttacks_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sm_RepeatedAttacks_Protection &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Parse_Pairing_Failed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
</UL>

<P><STRONG><a name="[199]"></a>sm_Reset_Timer</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, securitymgr.o(i.sm_Reset_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sm_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
</UL>

<P><STRONG><a name="[18e]"></a>sm_Search_BlackList</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, securitymgr.o(i.sm_Search_BlackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sm_Search_BlackList &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[19b]"></a>sm_SecurityRequest_Handler</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, securitymgr.o(i.sm_SecurityRequest_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sm_SecurityRequest_Handler &rArr; SM_Send_Pairing_Request &rArr; sm_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Send_Pairing_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[211]"></a>sm_Select_STK_Method</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, securitymgr.o(i.sm_Select_STK_Method))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sm_Select_STK_Method
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Response_Handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingRequest_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>sm_Send_Data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, securitymgr.o(i.sm_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sm_Send_Data &rArr; sm_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Reset_Timer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Find_Remote_Device_Index
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ValidateMConfirm
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_MConfirm_Sender
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingRequest_Handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_PairingConfirm
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Distribute_Keys
</UL>

<P><STRONG><a name="[19d]"></a>sm_ValidateMConfirm</STRONG> (Thumb, 238 bytes, Stack size 168 bytes, securitymgr.o(i.sm_ValidateMConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sm_ValidateMConfirm &rArr; sm_Gen_Confirm_Val &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Key
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Send_Data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Pairing_Failed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_TX_Packet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Gen_Confirm_Val
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Process_Q
</UL>

<P><STRONG><a name="[151]"></a>unpack_4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rom_ll_ll_routines.o(i.unpack_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = unpack_4
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
</UL>

<P><STRONG><a name="[a1]"></a>Calculate_Hash</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, rom_securitymgr.o(i.Calculate_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Calculate_Hash &rArr; LL_Encrypt_Plain_Data &rArr; encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Resolvable_PrivateAddr
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resolve_PrivateAddr
</UL>

<P><STRONG><a name="[11c]"></a>LeftShift</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, rom_securitymgr.o(i.LeftShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LeftShift
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_SubKeys
</UL>

<P><STRONG><a name="[bb]"></a>aci_GATT_ATTRIBUTE_MODIFIED_Event</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, att.o(i.aci_GATT_ATTRIBUTE_MODIFIED_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = aci_GATT_ATTRIBUTE_MODIFIED_Event &rArr; aci_gatt_attribute_modified_event &rArr; Attribute_Modified_CB &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
</UL>

<P><STRONG><a name="[17d]"></a>aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event</STRONG> (Thumb, 34 bytes, Stack size 136 bytes, att.o(i.aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = aci_GATT_L2CAP_READ_MULTI_PERMIT_REQ_Event &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[15e]"></a>aci_GATT_WRITE_PERMIT_REQ_Event</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, att.o(i.aci_GATT_WRITE_PERMIT_REQ_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = aci_GATT_WRITE_PERMIT_REQ_Event
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
</UL>

<P><STRONG><a name="[1b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4a]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3a]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3b]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
